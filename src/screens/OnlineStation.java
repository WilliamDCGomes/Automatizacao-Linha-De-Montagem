package screens;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import connectionbd.ConnectionModule;
import functions.DesconectStation;
import javax.swing.table.DefaultTableModel;
public class OnlineStation extends javax.swing.JFrame {
    Connection connection = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    int x = 0;
    public OnlineStation() {
        initComponents();
        ConnectionModule connect = new ConnectionModule();
        connection = connect.getConnectionMySQL();
        inputStatusStation.setSelectedIndex(1);
    }
    private void clearTable(){
        DefaultTableModel table = (DefaultTableModel) tableOnlineStation.getModel();
        for(int i=table.getRowCount()-1; i >= 0; i--){
            table.removeRow(i);
        }
    }
    private void getStations(){
        DefaultTableModel table = (DefaultTableModel) tableOnlineStation.getModel();
        String sql = "select id, login as 'Login', working as 'Em Operação' from stations";
        try {
            pst = connection.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next()){
                String id = Integer.toString(rs.getInt(1));
                String login = rs.getString(2);
                String status = "NÃO DEFINIDO";
                if(rs.getInt(3)==0){
                    status = "NÃO";
                }
                else if(rs.getInt(3)==1){
                    status = "SIM";
                }
                String[] data = {id, login, status};
                table.addRow(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
    }
    private void getStationsOnline(){
        DefaultTableModel table = (DefaultTableModel) tableOnlineStation.getModel();
        String sql = "select id, login as 'Login', working as 'Em Operação' from stations where working = 1";
        try {
            pst = connection.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next()){
                String id = Integer.toString(rs.getInt(1));
                String login = rs.getString(2);
                String status = "NÃO DEFINIDO";
                if(rs.getInt(3)==0){
                    status = "NÃO";
                }
                else if(rs.getInt(3)==1){
                    status = "SIM";
                }
                String[] data = {id, login, status};
                table.addRow(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
    }
    private void getStationsOffline(){
        DefaultTableModel table = (DefaultTableModel) tableOnlineStation.getModel();
        String sql = "select id, login as 'Login', working as 'Em Operação' from stations where working = 0";
        try {
            pst = connection.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next()){
                String id = Integer.toString(rs.getInt(1));
                String login = rs.getString(2);
                String status = "NÃO DEFINIDO";
                if(rs.getInt(3)==0){
                    status = "NÃO";
                }
                else if(rs.getInt(3)==1){
                    status = "SIM";
                }
                String[] data = {id, login, status};
                table.addRow(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
    }
    private void desconectStation(String login){
        try{
            DesconectStation desconectStation = new DesconectStation();
            desconectStation.disconect(login, 1);
            JOptionPane.showMessageDialog(null, "ESTAÇÃO DESCONECTADA COM SUCESSO");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtOnlineStation = new javax.swing.JLabel();
        allTableOnlineStation = new javax.swing.JScrollPane();
        tableOnlineStation = new javax.swing.JTable();
        buttonFilter = new javax.swing.JButton();
        inputStatusStation = new javax.swing.JComboBox<>();
        buttonDesconect = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estações Online");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        txtOnlineStation.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        txtOnlineStation.setText("ESTAÇÕES ONLINE");
        getContentPane().add(txtOnlineStation);
        txtOnlineStation.setBounds(170, 20, 240, 32);

        tableOnlineStation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Nome", "Siituação"
            }
        ));
        allTableOnlineStation.setViewportView(tableOnlineStation);

        getContentPane().add(allTableOnlineStation);
        allTableOnlineStation.setBounds(17, 70, 545, 255);

        buttonFilter.setText("FILTRAR");
        buttonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFilterActionPerformed(evt);
            }
        });
        buttonFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buttonFilterKeyPressed(evt);
            }
        });
        getContentPane().add(buttonFilter);
        buttonFilter.setBounds(190, 340, 90, 30);

        inputStatusStation.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        inputStatusStation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "ONLINE", "OFFLINE" }));
        inputStatusStation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inputStatusStationItemStateChanged(evt);
            }
        });
        inputStatusStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputStatusStationActionPerformed(evt);
            }
        });
        inputStatusStation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputStatusStationKeyPressed(evt);
            }
        });
        getContentPane().add(inputStatusStation);
        inputStatusStation.setBounds(20, 340, 140, 29);

        buttonDesconect.setText("DESCONECTAR");
        buttonDesconect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDesconectActionPerformed(evt);
            }
        });
        buttonDesconect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buttonDesconectKeyPressed(evt);
            }
        });
        getContentPane().add(buttonDesconect);
        buttonDesconect.setBounds(300, 340, 120, 30);

        buttonRefresh.setText("ATUALIZAR");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        buttonRefresh.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buttonRefreshKeyPressed(evt);
            }
        });
        getContentPane().add(buttonRefresh);
        buttonRefresh.setBounds(440, 340, 120, 30);

        setSize(new java.awt.Dimension(587, 422));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFilterActionPerformed
        clearTable();
        if(inputStatusStation.getSelectedItem().equals("TODOS")){
            getStations();
        }
        else if(inputStatusStation.getSelectedItem().equals("ONLINE")){
            getStationsOnline();
        }
        else if(inputStatusStation.getSelectedItem().equals("OFFLINE")){
            getStationsOffline();
        }
    }//GEN-LAST:event_buttonFilterActionPerformed

    private void buttonFilterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buttonFilterKeyPressed
        if(evt.getKeyCode() == evt.VK_ENTER){
            clearTable();
            if(inputStatusStation.getSelectedItem().equals("TODOS")){
                getStations();
            }
            else if(inputStatusStation.getSelectedItem().equals("ONLINE")){
                getStationsOnline();
            }
            else if(inputStatusStation.getSelectedItem().equals("OFFLINE")){
                getStationsOffline();
            }
        }
    }//GEN-LAST:event_buttonFilterKeyPressed

    private void inputStatusStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputStatusStationActionPerformed
        
    }//GEN-LAST:event_inputStatusStationActionPerformed

    private void inputStatusStationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputStatusStationKeyPressed
        if(evt.getKeyCode() == evt.VK_ENTER){
            clearTable();
            if(inputStatusStation.getSelectedItem().equals("TODOS")){
                getStations();
            }
            else if(inputStatusStation.getSelectedItem().equals("ONLINE")){
                getStationsOnline();
            }
            else if(inputStatusStation.getSelectedItem().equals("OFFLINE")){
                getStationsOffline();
            }
        }
    }//GEN-LAST:event_inputStatusStationKeyPressed

    private void buttonDesconectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDesconectActionPerformed
        int set=tableOnlineStation.getSelectedRow();
        String login = tableOnlineStation.getModel().getValueAt(set,1).toString();
        desconectStation(login);
    }//GEN-LAST:event_buttonDesconectActionPerformed

    private void buttonDesconectKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buttonDesconectKeyPressed
        if(evt.getKeyCode() == evt.VK_ENTER){
            int set=tableOnlineStation.getSelectedRow();
            String login = tableOnlineStation.getModel().getValueAt(set,1).toString();
            desconectStation(login);
        }
    }//GEN-LAST:event_buttonDesconectKeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if(x==0){
            x++;
            clearTable();
            if(inputStatusStation.getSelectedItem().equals("TODOS")){
                getStations();
            }
            else if(inputStatusStation.getSelectedItem().equals("ONLINE")){
                getStationsOnline();
            }
            else if(inputStatusStation.getSelectedItem().equals("OFFLINE")){
                getStationsOffline();
            }
        }
    }//GEN-LAST:event_formWindowActivated

    private void inputStatusStationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inputStatusStationItemStateChanged
        clearTable();
        if(inputStatusStation.getSelectedItem().equals("TODOS")){
            getStations();
        }
        else if(inputStatusStation.getSelectedItem().equals("ONLINE")){
            getStationsOnline();
        }
        else if(inputStatusStation.getSelectedItem().equals("OFFLINE")){
            getStationsOffline();
        }
    }//GEN-LAST:event_inputStatusStationItemStateChanged

    private void buttonRefreshKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buttonRefreshKeyPressed
        if(evt.getKeyCode() == evt.VK_ENTER){
            clearTable();
            if(inputStatusStation.getSelectedItem().equals("TODOS")){
                getStations();
            }
            else if(inputStatusStation.getSelectedItem().equals("ONLINE")){
                getStationsOnline();
            }
            else if(inputStatusStation.getSelectedItem().equals("OFFLINE")){
                getStationsOffline();
            }
        }
    }//GEN-LAST:event_buttonRefreshKeyPressed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        clearTable();
        if(inputStatusStation.getSelectedItem().equals("TODOS")){
            getStations();
        }
        else if(inputStatusStation.getSelectedItem().equals("ONLINE")){
            getStationsOnline();
        }
        else if(inputStatusStation.getSelectedItem().equals("OFFLINE")){
            getStationsOffline();
        }
    }//GEN-LAST:event_buttonRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OnlineStation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OnlineStation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OnlineStation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OnlineStation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OnlineStation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane allTableOnlineStation;
    private javax.swing.JButton buttonDesconect;
    private javax.swing.JButton buttonFilter;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JComboBox<String> inputStatusStation;
    private javax.swing.JTable tableOnlineStation;
    private javax.swing.JLabel txtOnlineStation;
    // End of variables declaration//GEN-END:variables
}
